"""
üöÄ ÏÜîÎ°úÎ™¨Îìú AI v2.1.2 - ÏÑ±Îä• ÌîÑÎ°úÌååÏùºÎü¨
Ïã§ÏãúÍ∞Ñ ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Î∞è Î≥ëÎ™©ÏßÄÏ†ê Î∂ÑÏÑù

Ï£ºÏöî Í∏∞Îä•:
- CPU/Î©îÎ™®Î¶¨/ÎîîÏä§ÌÅ¨ I/O Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ
- Î™®ÎìàÎ≥Ñ ÏÑ±Îä• Î∂ÑÏÑù
- ÎåÄÏö©Îüâ ÌååÏùº Ï≤òÎ¶¨ ÏµúÏ†ÅÌôî Í∂åÏû•
- Î©îÎ™®Î¶¨ ÎàÑÏàò Í∞êÏßÄ Î∞è Í≤ΩÍ≥†
"""

import psutil
import time
import threading
import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
import tracemalloc
import gc
import logging
from dataclasses import dataclass, asdict
from collections import deque
import functools

@dataclass
class PerformanceMetric:
    """ÏÑ±Îä• ÏßÄÌëú Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    timestamp: str
    cpu_percent: float
    memory_percent: float
    memory_used_mb: float
    disk_io_read_mb: float
    disk_io_write_mb: float
    network_io_sent_mb: float
    network_io_recv_mb: float
    active_threads: int
    open_files: int

@dataclass
class ModulePerformance:
    """Î™®ÎìàÎ≥Ñ ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞"""
    module_name: str
    execution_time: float
    memory_usage_mb: float
    peak_memory_mb: float
    cpu_usage: float
    io_operations: int
    error_count: int

class PerformanceProfiler:
    """Ïã§ÏãúÍ∞Ñ ÏÑ±Îä• ÌîÑÎ°úÌååÏùºÎü¨"""
    
    def __init__(self, max_history: int = 1000):
        self.max_history = max_history
        self.metrics_history = deque(maxlen=max_history)
        self.module_stats = {}
        self.is_monitoring = False
        self.monitor_thread = None
        self.start_time = time.time()
        
        # Î©îÎ™®Î¶¨ Ï∂îÏ†Å ÏãúÏûë
        tracemalloc.start()
        
        # Í∏∞Ï§Ä ÏÑ±Îä• Í∞íÎì§
        self.baseline_metrics = {
            "cpu_threshold": 80.0,
            "memory_threshold": 85.0,
            "disk_io_threshold": 100.0,  # MB/s
            "response_time_threshold": 5.0,  # seconds
        }
        
        self.logger = logging.getLogger(__name__)
    
    def start_monitoring(self, interval: float = 1.0):
        """Ïã§ÏãúÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë"""
        if self.is_monitoring:
            return
        
        self.is_monitoring = True
        self.monitor_thread = threading.Thread(
            target=self._monitor_loop,
            args=(interval,),
            daemon=True
        )
        self.monitor_thread.start()
        self.logger.info("üîç ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë")
    
    def stop_monitoring(self):
        """Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ"""
        self.is_monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join()
        self.logger.info("‚èπÔ∏è ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Ï§ëÏßÄ")
    
    def _monitor_loop(self, interval: float):
        """Î™®ÎãàÌÑ∞ÎßÅ Î£®ÌîÑ"""
        last_disk_io = psutil.disk_io_counters()
        last_net_io = psutil.net_io_counters()
        
        while self.is_monitoring:
            try:
                # ÌòÑÏû¨ ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏàòÏßë
                current_time = datetime.now().isoformat()
                
                # CPU ÏÇ¨Ïö©Î•†
                cpu_percent = psutil.cpu_percent(interval=0.1)
                
                # Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†
                memory = psutil.virtual_memory()
                memory_percent = memory.percent
                memory_used_mb = memory.used / (1024 * 1024)
                
                # ÎîîÏä§ÌÅ¨ I/O
                current_disk_io = psutil.disk_io_counters()
                disk_read_mb = (current_disk_io.read_bytes - last_disk_io.read_bytes) / (1024 * 1024) / interval
                disk_write_mb = (current_disk_io.write_bytes - last_disk_io.write_bytes) / (1024 * 1024) / interval
                last_disk_io = current_disk_io
                
                # ÎÑ§Ìä∏ÏõåÌÅ¨ I/O
                current_net_io = psutil.net_io_counters()
                net_sent_mb = (current_net_io.bytes_sent - last_net_io.bytes_sent) / (1024 * 1024) / interval
                net_recv_mb = (current_net_io.bytes_recv - last_net_io.bytes_recv) / (1024 * 1024) / interval
                last_net_io = current_net_io
                
                # ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ≥¥
                process = psutil.Process()
                active_threads = process.num_threads()
                open_files = len(process.open_files())
                
                # Î©îÌä∏Î¶≠ ÏÉùÏÑ±
                metric = PerformanceMetric(
                    timestamp=current_time,
                    cpu_percent=cpu_percent,
                    memory_percent=memory_percent,
                    memory_used_mb=memory_used_mb,
                    disk_io_read_mb=disk_read_mb,
                    disk_io_write_mb=disk_write_mb,
                    network_io_sent_mb=net_sent_mb,
                    network_io_recv_mb=net_recv_mb,
                    active_threads=active_threads,
                    open_files=open_files
                )
                
                self.metrics_history.append(metric)
                
                # ÏûÑÍ≥ÑÍ∞í Ï¥àÍ≥º Ïãú Í≤ΩÍ≥†
                self._check_thresholds(metric)
                
                time.sleep(interval)
                
            except Exception as e:
                self.logger.error(f"Î™®ÎãàÌÑ∞ÎßÅ Ïò§Î•ò: {e}")
                time.sleep(interval)
    
    def _check_thresholds(self, metric: PerformanceMetric):
        """ÏûÑÍ≥ÑÍ∞í ÌôïÏù∏ Î∞è Í≤ΩÍ≥†"""
        warnings = []
        
        if metric.cpu_percent > self.baseline_metrics["cpu_threshold"]:
            warnings.append(f"‚ö†Ô∏è ÎÜíÏùÄ CPU ÏÇ¨Ïö©Î•†: {metric.cpu_percent:.1f}%")
        
        if metric.memory_percent > self.baseline_metrics["memory_threshold"]:
            warnings.append(f"‚ö†Ô∏è ÎÜíÏùÄ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†: {metric.memory_percent:.1f}%")
        
        if metric.disk_io_read_mb > self.baseline_metrics["disk_io_threshold"]:
            warnings.append(f"‚ö†Ô∏è ÎÜíÏùÄ ÎîîÏä§ÌÅ¨ ÏùΩÍ∏∞: {metric.disk_io_read_mb:.1f} MB/s")
        
        if metric.disk_io_write_mb > self.baseline_metrics["disk_io_threshold"]:
            warnings.append(f"‚ö†Ô∏è ÎÜíÏùÄ ÎîîÏä§ÌÅ¨ Ïì∞Í∏∞: {metric.disk_io_write_mb:.1f} MB/s")
        
        if warnings:
            for warning in warnings:
                self.logger.warning(warning)
    
    def profile_function(self, func_name: str = None):
        """Ìï®Ïàò ÏÑ±Îä• ÌîÑÎ°úÌååÏùºÎßÅ Îç∞ÏΩîÎ†àÏù¥ÌÑ∞"""
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                name = func_name or f"{func.__module__}.{func.__name__}"
                
                # ÏãúÏûë ÏãúÏ†ê Î©îÌä∏Î¶≠
                start_time = time.time()
                start_memory = self._get_memory_usage()
                tracemalloc_start = tracemalloc.take_snapshot()
                
                try:
                    # Ìï®Ïàò Ïã§Ìñâ
                    result = func(*args, **kwargs)
                    
                    # Ï¢ÖÎ£å ÏãúÏ†ê Î©îÌä∏Î¶≠
                    end_time = time.time()
                    end_memory = self._get_memory_usage()
                    tracemalloc_end = tracemalloc.take_snapshot()
                    
                    # ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
                    execution_time = end_time - start_time
                    memory_diff = end_memory - start_memory
                    
                    # ÌîºÌÅ¨ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Í≥ÑÏÇ∞
                    top_stats = tracemalloc_end.compare_to(tracemalloc_start, 'lineno')
                    peak_memory = sum(stat.size_diff for stat in top_stats) / (1024 * 1024)
                    
                    # Î™®Îìà ÏÑ±Îä• Í∏∞Î°ù
                    module_perf = ModulePerformance(
                        module_name=name,
                        execution_time=execution_time,
                        memory_usage_mb=memory_diff,
                        peak_memory_mb=abs(peak_memory),
                        cpu_usage=psutil.cpu_percent(),
                        io_operations=0,  # ÌïÑÏöîÏãú Íµ¨ÌòÑ
                        error_count=0
                    )
                    
                    self._record_module_performance(module_perf)
                    
                    # ÏÑ±Îä• Í≤ΩÍ≥†
                    if execution_time > self.baseline_metrics["response_time_threshold"]:
                        self.logger.warning(f"‚è±Ô∏è ÎäêÎ¶∞ Ìï®Ïàò Ïã§Ìñâ: {name} ({execution_time:.2f}Ï¥à)")
                    
                    return result
                    
                except Exception as e:
                    # ÏóêÎü¨ Î∞úÏÉù Ïãú Í∏∞Î°ù
                    error_perf = ModulePerformance(
                        module_name=name,
                        execution_time=time.time() - start_time,
                        memory_usage_mb=0,
                        peak_memory_mb=0,
                        cpu_usage=0,
                        io_operations=0,
                        error_count=1
                    )
                    self._record_module_performance(error_perf)
                    raise
            
            return wrapper
        return decorator
    
    def _get_memory_usage(self) -> float:
        """ÌòÑÏû¨ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ (MB)"""
        process = psutil.Process()
        return process.memory_info().rss / (1024 * 1024)
    
    def _record_module_performance(self, perf: ModulePerformance):
        """Î™®Îìà ÏÑ±Îä• Í∏∞Î°ù"""
        if perf.module_name not in self.module_stats:
            self.module_stats[perf.module_name] = {
                "call_count": 0,
                "total_time": 0,
                "total_memory": 0,
                "peak_memory": 0,
                "error_count": 0,
                "avg_time": 0,
                "avg_memory": 0
            }
        
        stats = self.module_stats[perf.module_name]
        stats["call_count"] += 1
        stats["total_time"] += perf.execution_time
        stats["total_memory"] += perf.memory_usage_mb
        stats["peak_memory"] = max(stats["peak_memory"], perf.peak_memory_mb)
        stats["error_count"] += perf.error_count
        
        # ÌèâÍ∑† Í≥ÑÏÇ∞
        stats["avg_time"] = stats["total_time"] / stats["call_count"]
        stats["avg_memory"] = stats["total_memory"] / stats["call_count"]
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """ÏÑ±Îä• ÏöîÏïΩ Ï†ïÎ≥¥"""
        if not self.metrics_history:
            return {"error": "Î™®ÎãàÌÑ∞ÎßÅ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§"}
        
        # ÏµúÍ∑º Î©îÌä∏Î¶≠Îì§
        recent_metrics = list(self.metrics_history)[-100:]  # ÏµúÍ∑º 100Í∞ú
        
        # ÌèâÍ∑† Í≥ÑÏÇ∞
        avg_cpu = sum(m.cpu_percent for m in recent_metrics) / len(recent_metrics)
        avg_memory = sum(m.memory_percent for m in recent_metrics) / len(recent_metrics)
        avg_disk_read = sum(m.disk_io_read_mb for m in recent_metrics) / len(recent_metrics)
        avg_disk_write = sum(m.disk_io_write_mb for m in recent_metrics) / len(recent_metrics)
        
        # ÌîºÌÅ¨ Í∞í
        peak_cpu = max(m.cpu_percent for m in recent_metrics)
        peak_memory = max(m.memory_percent for m in recent_metrics)
        peak_disk_read = max(m.disk_io_read_mb for m in recent_metrics)
        
        return {
            "monitoring_duration": time.time() - self.start_time,
            "total_samples": len(self.metrics_history),
            "averages": {
                "cpu_percent": round(avg_cpu, 2),
                "memory_percent": round(avg_memory, 2),
                "disk_read_mb_s": round(avg_disk_read, 2),
                "disk_write_mb_s": round(avg_disk_write, 2)
            },
            "peaks": {
                "cpu_percent": round(peak_cpu, 2),
                "memory_percent": round(peak_memory, 2),
                "disk_read_mb_s": round(peak_disk_read, 2)
            },
            "current_status": self._get_current_status(),
            "module_performance": self.module_stats,
            "recommendations": self._generate_recommendations()
        }
    
    def _get_current_status(self) -> Dict[str, str]:
        """ÌòÑÏû¨ ÏãúÏä§ÌÖú ÏÉÅÌÉú"""
        if not self.metrics_history:
            return {"status": "unknown"}
        
        latest = self.metrics_history[-1]
        
        status = "Ï†ïÏÉÅ"
        if latest.cpu_percent > 80:
            status = "CPU Í≥ºÎ∂ÄÌïò"
        elif latest.memory_percent > 85:
            status = "Î©îÎ™®Î¶¨ Î∂ÄÏ°±"
        elif latest.disk_io_read_mb > 50 or latest.disk_io_write_mb > 50:
            status = "ÎîîÏä§ÌÅ¨ I/O Í≥ºÎ∂ÄÌïò"
        
        return {
            "status": status,
            "cpu": f"{latest.cpu_percent:.1f}%",
            "memory": f"{latest.memory_percent:.1f}%",
            "threads": str(latest.active_threads),
            "open_files": str(latest.open_files)
        }
    
    def _generate_recommendations(self) -> List[str]:
        """ÏÑ±Îä• Í∞úÏÑ† Í∂åÏû•ÏÇ¨Ìï≠"""
        recommendations = []
        
        if not self.metrics_history:
            return ["Î™®ÎãàÌÑ∞ÎßÅ Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§"]
        
        # ÏµúÍ∑º Î©îÌä∏Î¶≠ Î∂ÑÏÑù
        recent = list(self.metrics_history)[-50:]  # ÏµúÍ∑º 50Í∞ú
        avg_cpu = sum(m.cpu_percent for m in recent) / len(recent)
        avg_memory = sum(m.memory_percent for m in recent) / len(recent)
        avg_disk_io = sum(m.disk_io_read_mb + m.disk_io_write_mb for m in recent) / len(recent)
        
        # CPU Í∂åÏû•ÏÇ¨Ìï≠
        if avg_cpu > 70:
            recommendations.append("üíæ CPU ÏßëÏïΩÏ†Å ÏûëÏóÖÏùÑ Î∞∞Ïπò Ï≤òÎ¶¨Î°ú Î∂ÑÌï†ÌïòÏÑ∏Ïöî")
            recommendations.append("üîÑ Î©ÄÌã∞ÌîÑÎ°úÏÑ∏Ïã± ÎåÄÏã† ÎπÑÎèôÍ∏∞ Ï≤òÎ¶¨Î•º Í≥†Î†§ÌïòÏÑ∏Ïöî")
        
        # Î©îÎ™®Î¶¨ Í∂åÏû•ÏÇ¨Ìï≠
        if avg_memory > 80:
            recommendations.append("üßπ Î©îÎ™®Î¶¨ Ï†ïÎ¶¨: gc.collect() Ìò∏Ï∂úÏùÑ Ï¶ùÍ∞ÄÏãúÌÇ§ÏÑ∏Ïöî")
            recommendations.append("üìù ÎåÄÏö©Îüâ Îç∞Ïù¥ÌÑ∞Îäî Ïä§Ìä∏Î¶¨Î∞ç Ï≤òÎ¶¨Î•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî")
            recommendations.append("üóÉÔ∏è Ï∫êÏãú ÌÅ¨Í∏∞Î•º Ï§ÑÏù¥Í±∞ÎÇò LRU Ï∫êÏãúÎ•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî")
        
        # ÎîîÏä§ÌÅ¨ I/O Í∂åÏû•ÏÇ¨Ìï≠
        if avg_disk_io > 30:
            recommendations.append("üíø ÌååÏùº ÏùΩÍ∏∞/Ïì∞Í∏∞Î•º Î∞∞ÏπòÎ°ú Ï≤òÎ¶¨ÌïòÏÑ∏Ïöî")
            recommendations.append("‚ö° SSD ÏÇ¨Ïö©ÏùÑ Í∂åÏû•Ìï©ÎãàÎã§")
            recommendations.append("üì¶ ÌååÏùº ÏïïÏ∂ïÏùÑ Í≥†Î†§ÌïòÏÑ∏Ïöî")
        
        # Î™®ÎìàÎ≥Ñ Í∂åÏû•ÏÇ¨Ìï≠
        slow_modules = [
            name for name, stats in self.module_stats.items()
            if stats["avg_time"] > 2.0
        ]
        
        if slow_modules:
            recommendations.append(f"üêå ÎäêÎ¶∞ Î™®Îìà ÏµúÏ†ÅÌôî ÌïÑÏöî: {', '.join(slow_modules)}")
        
        return recommendations if recommendations else ["‚úÖ ÏãúÏä§ÌÖúÏù¥ ÏµúÏ†Å ÏÉÅÌÉúÏûÖÎãàÎã§"]
    
    def export_report(self, filepath: str):
        """ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÌååÏùº Ï†ÄÏû•"""
        report = {
            "generated_at": datetime.now().isoformat(),
            "summary": self.get_performance_summary(),
            "raw_metrics": [asdict(m) for m in list(self.metrics_history)[-500:]],  # ÏµúÍ∑º 500Í∞ú
            "system_info": {
                "cpu_count": psutil.cpu_count(),
                "memory_total_gb": psutil.virtual_memory().total / (1024**3),
                "platform": os.name
            }
        }
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìä ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ Ï†ÄÏû•: {filepath}")
    
    def memory_cleanup(self):
        """Î©îÎ™®Î¶¨ Ï†ïÎ¶¨"""
        before = self._get_memory_usage()
        
        # Í∞ÄÎπÑÏßÄ Ïª¨Î†âÏÖò Í∞ïÏ†ú Ïã§Ìñâ
        collected = gc.collect()
        
        after = self._get_memory_usage()
        freed = before - after
        
        self.logger.info(f"üßπ Î©îÎ™®Î¶¨ Ï†ïÎ¶¨ ÏôÑÎ£å: {freed:.2f}MB Ìï¥Ï†ú, {collected}Í∞ú Í∞ùÏ≤¥ Ï†ïÎ¶¨")
        
        return {
            "freed_mb": freed,
            "objects_collected": collected,
            "before_mb": before,
            "after_mb": after
        }

# Ï†ÑÏó≠ ÌîÑÎ°úÌååÏùºÎü¨ Ïù∏Ïä§ÌÑ¥Ïä§
global_profiler = PerformanceProfiler()

def profile_performance(func_name: str = None):
    """ÏÑ±Îä• ÌîÑÎ°úÌååÏùºÎßÅ Îç∞ÏΩîÎ†àÏù¥ÌÑ∞ (Í∞ÑÌé∏ ÏÇ¨Ïö©)"""
    return global_profiler.profile_function(func_name)

def get_system_health() -> Dict[str, Any]:
    """ÏãúÏä§ÌÖú Í±¥Í∞ï ÏÉÅÌÉú ÌôïÏù∏"""
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    health_score = 100
    issues = []
    
    # CPU Ï≤¥ÌÅ¨
    if cpu_percent > 80:
        health_score -= 30
        issues.append("ÎÜíÏùÄ CPU ÏÇ¨Ïö©Î•†")
    elif cpu_percent > 60:
        health_score -= 15
        issues.append("Î≥¥ÌÜµ CPU ÏÇ¨Ïö©Î•†")
    
    # Î©îÎ™®Î¶¨ Ï≤¥ÌÅ¨
    if memory.percent > 85:
        health_score -= 30
        issues.append("ÎÜíÏùÄ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†")
    elif memory.percent > 70:
        health_score -= 15
        issues.append("Î≥¥ÌÜµ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†")
    
    # ÎîîÏä§ÌÅ¨ Ï≤¥ÌÅ¨
    if disk.percent > 90:
        health_score -= 20
        issues.append("ÎîîÏä§ÌÅ¨ Í≥µÍ∞Ñ Î∂ÄÏ°±")
    elif disk.percent > 80:
        health_score -= 10
        issues.append("ÎîîÏä§ÌÅ¨ Í≥µÍ∞Ñ Ï£ºÏùò")
    
    status = "Ïö∞Ïàò"
    if health_score < 70:
        status = "ÏúÑÌóò"
    elif health_score < 85:
        status = "Ï£ºÏùò"
    
    return {
        "health_score": max(0, health_score),
        "status": status,
        "issues": issues,
        "metrics": {
            "cpu_percent": cpu_percent,
            "memory_percent": memory.percent,
            "memory_available_gb": memory.available / (1024**3),
            "disk_percent": disk.percent,
            "disk_free_gb": disk.free / (1024**3)
        },
        "recommendations": _get_health_recommendations(health_score, issues)
    }

def _get_health_recommendations(score: int, issues: List[str]) -> List[str]:
    """Í±¥Í∞ï ÏÉÅÌÉú Í∏∞Î∞ò Í∂åÏû•ÏÇ¨Ìï≠"""
    recommendations = []
    
    if "ÎÜíÏùÄ CPU ÏÇ¨Ïö©Î•†" in issues:
        recommendations.append("üîÑ Î∞±Í∑∏ÎùºÏö¥Îìú ÌîÑÎ°úÏÑ∏Ïä§Î•º ÌôïÏù∏ÌïòÍ≥† Î∂àÌïÑÏöîÌïú ÏûëÏóÖÏùÑ Ï§ëÏßÄÌïòÏÑ∏Ïöî")
    
    if "ÎÜíÏùÄ Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†" in issues:
        recommendations.append("üíæ Î©îÎ™®Î¶¨ Ï†ïÎ¶¨Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§. Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÑ Ïû¨ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî")
    
    if "ÎîîÏä§ÌÅ¨ Í≥µÍ∞Ñ" in str(issues):
        recommendations.append("üóÇÔ∏è ÏûÑÏãú ÌååÏùºÍ≥º Î°úÍ∑∏ ÌååÏùºÏùÑ Ï†ïÎ¶¨ÌïòÏÑ∏Ïöî")
    
    if score > 85:
        recommendations.append("‚úÖ ÏãúÏä§ÌÖúÏù¥ ÏµúÏ†Å ÏÉÅÌÉúÏûÖÎãàÎã§")
    
    return recommendations

if __name__ == "__main__":
    # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    print("üöÄ ÏÜîÎ°úÎ™¨Îìú AI ÏÑ±Îä• ÌîÑÎ°úÌååÏùºÎü¨ v2.1.2")
    print("=" * 50)
    
    # ÏãúÏä§ÌÖú Í±¥Í∞ï ÏÉÅÌÉú ÌôïÏù∏
    health = get_system_health()
    print(f"üíä ÏãúÏä§ÌÖú Í±¥Í∞ïÎèÑ: {health['health_score']}/100 ({health['status']})")
    print(f"üìä CPU: {health['metrics']['cpu_percent']:.1f}%")
    print(f"üíæ Î©îÎ™®Î¶¨: {health['metrics']['memory_percent']:.1f}%")
    print(f"üíø ÎîîÏä§ÌÅ¨: {health['metrics']['disk_percent']:.1f}%")
    
    if health['issues']:
        print("\n‚ö†Ô∏è Î∞úÍ≤¨Îêú Î¨∏Ï†ú:")
        for issue in health['issues']:
            print(f"  - {issue}")
    
    print("\nüí° Í∂åÏû•ÏÇ¨Ìï≠:")
    for rec in health['recommendations']:
        print(f"  {rec}")
    
    # ÌîÑÎ°úÌååÏùºÎü¨ ÌÖåÏä§Ìä∏
    profiler = PerformanceProfiler()
    
    # ÌÖåÏä§Ìä∏ Ìï®Ïàò
    @profiler.profile_function("test_function")
    def test_heavy_operation():
        """Î¨¥Í±∞Ïö¥ ÏûëÏóÖ ÏãúÎÆ¨Î†àÏù¥ÏÖò"""
        import random
        data = [random.random() for _ in range(100000)]
        return sum(data)
    
    print("\nüîç ÏÑ±Îä• ÌîÑÎ°úÌååÏùºÎßÅ ÌÖåÏä§Ìä∏...")
    profiler.start_monitoring(interval=0.5)
    
    # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    for i in range(3):
        result = test_heavy_operation()
        time.sleep(0.5)
    
    time.sleep(2)  # Î™®ÎãàÌÑ∞ÎßÅ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    profiler.stop_monitoring()
    
    # Í≤∞Í≥º Ï∂úÎ†•
    summary = profiler.get_performance_summary()
    print("\nüìà ÏÑ±Îä• ÏöîÏïΩ:")
    print(f"  ÌèâÍ∑† CPU: {summary['averages']['cpu_percent']}%")
    print(f"  ÌèâÍ∑† Î©îÎ™®Î¶¨: {summary['averages']['memory_percent']}%")
    print(f"  ÌòÑÏû¨ ÏÉÅÌÉú: {summary['current_status']['status']}")
    
    print("\nüéØ ÏµúÏ†ÅÌôî Í∂åÏû•ÏÇ¨Ìï≠:")
    for rec in summary['recommendations']:
        print(f"  {rec}")
    
    # Î©îÎ™®Î¶¨ Ï†ïÎ¶¨ ÌÖåÏä§Ìä∏
    cleanup_result = profiler.memory_cleanup()
    print(f"\nüßπ Î©îÎ™®Î¶¨ Ï†ïÎ¶¨: {cleanup_result['freed_mb']:.2f}MB Ìï¥Ï†ú")
    
    print("\n‚úÖ ÏÑ±Îä• ÌîÑÎ°úÌååÏùºÎü¨ ÌÖåÏä§Ìä∏ ÏôÑÎ£å!")
