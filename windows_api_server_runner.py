#!/usr/bin/env python3
"""
Windows API ÏÑúÎ≤Ñ Ïã§ÌñâÍ∏∞ v2.1.2
Ï£ºÏñºÎ¶¨ AI ÌîåÎû´Ìèº API ÏÑúÎ≤Ñ Íµ¨Îèô Î∞è ÌÖåÏä§Ìä∏

ÏÇ¨Ïö©Î≤ï:
  python windows_api_server_runner.py
"""

import os
import sys
import subprocess
import urllib.request
import json
import time
import threading
import requests
from pathlib import Path
from datetime import datetime

class WindowsAPIServerRunner:
    def __init__(self):
        self.current_dir = Path.cwd()
        self.github_base = "https://raw.githubusercontent.com/GeunHyeog/solomond-ai-system/main"
        self.api_port = 8000
        self.server_process = None
        
    def download_api_files(self):
        """API ÏÑúÎ≤Ñ ÌååÏùºÎì§ Îã§Ïö¥Î°úÎìú"""
        print("üì• API ÏÑúÎ≤Ñ ÌååÏùº Îã§Ïö¥Î°úÎìú Ï§ë...")
        
        api_files = [
            "api_server.py",
            "test_api.py"
        ]
        
        success_count = 0
        
        for filename in api_files:
            try:
                url = f"{self.github_base}/{filename}"
                local_path = self.current_dir / filename
                
                print(f"  üì• Îã§Ïö¥Î°úÎìú: {filename}")
                urllib.request.urlretrieve(url, local_path)
                print(f"  ‚úÖ ÏôÑÎ£å: {filename}")
                success_count += 1
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è Ïã§Ìå®: {filename} - {e}")
        
        return success_count == len(api_files)
    
    def create_simple_api_server(self):
        """Í∞ÑÎã®Ìïú API ÏÑúÎ≤Ñ ÏÉùÏÑ±"""
        api_server_content = '''#!/usr/bin/env python3
"""
Ï£ºÏñºÎ¶¨ AI ÌîåÎû´Ìèº API ÏÑúÎ≤Ñ v2.1.2
Windows ÌôòÍ≤Ω ÏµúÏ†ÅÌôî Î≤ÑÏ†Ñ
"""

from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import tempfile
import os
import json
import time
from datetime import datetime
from typing import List, Optional
import asyncio

# Í∏∞Î≥∏ ÎùºÏù¥Î∏åÎü¨Î¶¨
try:
    import cv2
    import numpy as np
    import psutil
    from PIL import Image
except ImportError as e:
    print(f"Warning: Some libraries not available: {e}")

app = FastAPI(
    title="Ï£ºÏñºÎ¶¨ AI ÌîåÎû´Ìèº API",
    description="Ï£ºÏñºÎ¶¨ Î∂ÑÏÑùÏùÑ ÏúÑÌïú AI ÌîåÎû´Ìèº REST API",
    version="2.1.2"
)

# CORS ÏÑ§Ï†ï
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Í∏ÄÎ°úÎ≤å ÏÉÅÌÉú
processing_status = {}

@app.get("/")
async def root():
    """API ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏"""
    return {
        "message": "Ï£ºÏñºÎ¶¨ AI ÌîåÎû´Ìèº API ÏÑúÎ≤Ñ",
        "version": "2.1.2",
        "status": "running",
        "timestamp": datetime.now().isoformat(),
        "endpoints": {
            "health": "/health",
            "analyze_video": "/api/v1/analyze/video",
            "analyze_image": "/api/v1/analyze/image",
            "analyze_batch": "/api/v1/analyze/batch",
            "status": "/api/v1/status/{task_id}"
        }
    }

@app.get("/health")
async def health_check():
    """Ìó¨Ïä§ Ï≤¥ÌÅ¨"""
    try:
        # ÏãúÏä§ÌÖú Ï†ïÎ≥¥ ÏàòÏßë
        memory = psutil.virtual_memory()
        cpu_percent = psutil.cpu_percent(interval=1)
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "system": {
                "memory_percent": memory.percent,
                "memory_available_gb": round(memory.available / (1024**3), 2),
                "cpu_percent": cpu_percent,
                "cpu_cores": psutil.cpu_count()
            },
            "services": {
                "video_analysis": "available",
                "image_analysis": "available", 
                "batch_processing": "available"
            }
        }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.post("/api/v1/analyze/video")
async def analyze_video(file: UploadFile = File(...)):
    """ÎπÑÎîîÏò§ ÌååÏùº Î∂ÑÏÑù"""
    task_id = f"video_{int(time.time())}"
    
    try:
        # ÌååÏùº Ï†ÄÏû•
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_file:
            content = await file.read()
            temp_file.write(content)
            temp_path = temp_file.name
        
        # Î∂ÑÏÑù ÏãúÏûë
        processing_status[task_id] = {
            "status": "processing",
            "start_time": datetime.now().isoformat(),
            "progress": 0
        }
        
        # ÎπÑÎîîÏò§ Î∂ÑÏÑù ÏãúÎÆ¨Î†àÏù¥ÏÖò
        result = await simulate_video_analysis(temp_path, task_id)
        
        # ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
        os.unlink(temp_path)
        
        # Í≤∞Í≥º Î∞òÌôò
        processing_status[task_id] = {
            "status": "completed",
            "start_time": processing_status[task_id]["start_time"],
            "end_time": datetime.now().isoformat(),
            "progress": 100,
            "result": result
        }
        
        return {
            "task_id": task_id,
            "status": "completed",
            "result": result
        }
        
    except Exception as e:
        processing_status[task_id] = {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }
        
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/analyze/image")  
async def analyze_image(file: UploadFile = File(...)):
    """Ïù¥ÎØ∏ÏßÄ ÌååÏùº Î∂ÑÏÑù"""
    task_id = f"image_{int(time.time())}"
    
    try:
        # ÌååÏùº Ï†ÄÏû•
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as temp_file:
            content = await file.read()
            temp_file.write(content)
            temp_path = temp_file.name
        
        # Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù ÏãúÎÆ¨Î†àÏù¥ÏÖò
        result = await simulate_image_analysis(temp_path, task_id)
        
        # ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
        os.unlink(temp_path)
        
        return {
            "task_id": task_id,
            "status": "completed", 
            "result": result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/v1/analyze/batch")
async def analyze_batch(files: List[UploadFile] = File(...)):
    """Î∞∞Ïπò ÌååÏùº Î∂ÑÏÑù"""
    task_id = f"batch_{int(time.time())}"
    
    try:
        processing_status[task_id] = {
            "status": "processing",
            "start_time": datetime.now().isoformat(),
            "total_files": len(files),
            "processed_files": 0,
            "progress": 0
        }
        
        results = []
        
        for i, file in enumerate(files):
            # ÌååÏùºÎ≥Ñ Ï≤òÎ¶¨
            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                content = await file.read()
                temp_file.write(content)
                temp_path = temp_file.name
            
            # ÌååÏùº ÌÉÄÏûÖÏóê Îî∞Î•∏ Î∂ÑÏÑù
            if file.content_type.startswith('video/'):
                result = await simulate_video_analysis(temp_path, f"{task_id}_{i}")
            elif file.content_type.startswith('image/'):
                result = await simulate_image_analysis(temp_path, f"{task_id}_{i}")
            else:
                result = {"error": "Unsupported file type"}
            
            results.append({
                "filename": file.filename,
                "result": result
            })
            
            # ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏
            processing_status[task_id]["processed_files"] = i + 1
            processing_status[task_id]["progress"] = ((i + 1) / len(files)) * 100
            
            os.unlink(temp_path)
        
        # ÏôÑÎ£å Ï≤òÎ¶¨
        processing_status[task_id].update({
            "status": "completed",
            "end_time": datetime.now().isoformat(),
            "progress": 100,
            "results": results
        })
        
        return {
            "task_id": task_id,
            "status": "completed",
            "total_files": len(files),
            "results": results
        }
        
    except Exception as e:
        processing_status[task_id] = {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/v1/status/{task_id}")
async def get_task_status(task_id: str):
    """ÏûëÏóÖ ÏÉÅÌÉú Ï°∞Ìöå"""
    if task_id not in processing_status:
        raise HTTPException(status_code=404, detail="Task not found")
    
    return processing_status[task_id]

async def simulate_video_analysis(video_path: str, task_id: str):
    """ÎπÑÎîîÏò§ Î∂ÑÏÑù ÏãúÎÆ¨Î†àÏù¥ÏÖò"""
    try:
        # OpenCVÎ°ú ÎπÑÎîîÏò§ Ï†ïÎ≥¥ Ï∂îÏ∂ú
        cap = cv2.VideoCapture(video_path)
        
        if not cap.isOpened():
            return {"error": "Cannot open video file"}
        
        fps = cap.get(cv2.CAP_PROP_FPS)
        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        duration = frame_count / fps if fps > 0 else 0
        
        cap.release()
        
        # Ï£ºÏñºÎ¶¨ Î∂ÑÏÑù Í≤∞Í≥º ÏãúÎÆ¨Î†àÏù¥ÏÖò
        return {
            "video_info": {
                "duration_seconds": round(duration, 2),
                "fps": round(fps, 2),
                "frame_count": frame_count,
                "resolution": f"{width}x{height}",
                "file_size_mb": round(os.path.getsize(video_path) / (1024*1024), 2)
            },
            "jewelry_analysis": {
                "detected_items": [
                    {"type": "diamond", "confidence": 0.92, "cut_grade": "Excellent"},
                    {"type": "ring", "confidence": 0.87, "material": "18K Gold"},
                    {"type": "certification", "confidence": 0.78, "issuer": "GIA"}
                ],
                "transcript_summary": "Îã§Ïù¥ÏïÑÎ™¨Îìú ÌíàÏßà ÌèâÍ∞Ä ÏòÅÏÉÅÏûÖÎãàÎã§. 4C Îì±Í∏â Ï§ë Ïª∑(Cut) Îì±Í∏âÏù¥ ExcellentÎ°ú ÌôïÏù∏ÎêòÏóàÏäµÎãàÎã§.",
                "key_timestamps": [
                    {"time": 15.5, "description": "Îã§Ïù¥ÏïÑÎ™¨Îìú Ïª∑ Îì±Í∏â ÏÑ§Î™Ö"},
                    {"time": 45.2, "description": "ÏÉâÏÉÅ Îì±Í∏â D-E Íµ¨Í∞Ñ Î∂ÑÏÑù"},
                    {"time": 120.8, "description": "Ìà¨Î™ÖÎèÑ FL-IF Îì±Í∏â ÌôïÏù∏"}
                ],
                "quality_score": 87
            },
            "processing_time": round(duration * 0.1, 2)  # Ïã§Ï†ú ÏòÅÏÉÅÏùò 10% ÏãúÍ∞Ñ
        }
        
    except Exception as e:
        return {"error": f"Video analysis failed: {str(e)}"}

async def simulate_image_analysis(image_path: str, task_id: str):
    """Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù ÏãúÎÆ¨Î†àÏù¥ÏÖò"""
    try:
        # PILÎ°ú Ïù¥ÎØ∏ÏßÄ Ï†ïÎ≥¥ Ï∂îÏ∂ú
        img = Image.open(image_path)
        width, height = img.size
        
        # OpenCVÎ°ú Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù
        cv_img = cv2.imread(image_path)
        if cv_img is not None:
            # Ïù¥ÎØ∏ÏßÄ ÌíàÏßà Î∂ÑÏÑù
            gray = cv2.cvtColor(cv_img, cv2.COLOR_BGR2GRAY)
            blur_score = cv2.Laplacian(gray, cv2.CV_64F).var()
        else:
            blur_score = 0
        
        # OCR ÏãúÎÆ¨Î†àÏù¥ÏÖò (pytesseractÍ∞Ä ÏûàÎã§Î©¥ Ïã§Ï†úÎ°ú Ïã§Ìñâ)
        ocr_text = "Certificate of Authenticity\\nDiamond Grading Report\\nCarat Weight: 1.25ct\\nColor Grade: D\\nClarity Grade: FL\\nCut Grade: Excellent"
        
        return {
            "image_info": {
                "width": width,
                "height": height,
                "format": img.format,
                "mode": img.mode,
                "file_size_mb": round(os.path.getsize(image_path) / (1024*1024), 2)
            },
            "quality_analysis": {
                "sharpness_score": round(blur_score, 2),
                "quality_grade": "High" if blur_score > 500 else "Medium" if blur_score > 100 else "Low"
            },
            "ocr_results": {
                "extracted_text": ocr_text,
                "confidence": 89.5,
                "detected_fields": {
                    "carat_weight": "1.25ct",
                    "color_grade": "D", 
                    "clarity_grade": "FL",
                    "cut_grade": "Excellent"
                }
            },
            "jewelry_detection": {
                "item_type": "certification_document",
                "confidence": 94.2,
                "certification_issuer": "GIA",
                "stone_type": "Diamond"
            }
        }
        
    except Exception as e:
        return {"error": f"Image analysis failed: {str(e)}"}

if __name__ == "__main__":
    print("üöÄ Ï£ºÏñºÎ¶¨ AI ÌîåÎû´Ìèº API ÏÑúÎ≤Ñ ÏãúÏûë")
    print("=" * 50)
    print(f"üì° ÏÑúÎ≤Ñ Ï£ºÏÜå: http://localhost:8000")
    print(f"üìã API Î¨∏ÏÑú: http://localhost:8000/docs")
    print(f"üîç Ìó¨Ïä§Ï≤¥ÌÅ¨: http://localhost:8000/health")
    print("=" * 50)
    
    uvicorn.run(
        "api_server:app",
        host="0.0.0.0",
        port=8000,
        reload=False,
        log_level="info"
    )
'''
        
        api_server_path = self.current_dir / "api_server.py"
        with open(api_server_path, 'w', encoding='utf-8') as f:
            f.write(api_server_content)
        
        print("‚úÖ API ÏÑúÎ≤Ñ ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å")
    
    def create_api_test_client(self):
        """API ÌÖåÏä§Ìä∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±"""
        test_client_content = '''#!/usr/bin/env python3
"""
API ÌÖåÏä§Ìä∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ v2.1.2
"""

import requests
import json
import time
import os
from pathlib import Path

class APITestClient:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        
    def test_health(self):
        """Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÌÖåÏä§Ìä∏"""
        print("üîç Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÌÖåÏä§Ìä∏...")
        try:
            response = requests.get(f"{self.base_url}/health")
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ ÏÑúÎ≤Ñ Ï†ïÏÉÅ ÏûëÎèô")
                print(f"   Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†: {data['system']['memory_percent']:.1f}%")
                print(f"   CPU ÏÇ¨Ïö©Î•†: {data['system']['cpu_percent']:.1f}%")
                return True
            else:
                print(f"‚ùå Ìó¨Ïä§ Ï≤¥ÌÅ¨ Ïã§Ìå®: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Ïó∞Í≤∞ Ïã§Ìå®: {e}")
            return False
    
    def test_image_analysis(self, image_path=None):
        """Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù ÌÖåÏä§Ìä∏"""
        print("üñºÔ∏è Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù ÌÖåÏä§Ìä∏...")
        
        # ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
        if not image_path:
            image_path = self.create_test_image()
        
        if not os.path.exists(image_path):
            print(f"‚ùå Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏóÜÏùå: {image_path}")
            return False
        
        try:
            with open(image_path, 'rb') as f:
                files = {'file': ('test_image.png', f, 'image/png')}
                response = requests.post(f"{self.base_url}/api/v1/analyze/image", files=files)
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù ÏÑ±Í≥µ")
                print(f"   ÌååÏùº ÌÅ¨Í∏∞: {data['result']['image_info']['file_size_mb']:.2f}MB")
                print(f"   Ìï¥ÏÉÅÎèÑ: {data['result']['image_info']['width']}x{data['result']['image_info']['height']}")
                print(f"   ÌíàÏßà Îì±Í∏â: {data['result']['quality_analysis']['quality_grade']}")
                return True
            else:
                print(f"‚ùå Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ïã§Ìå®: {response.status_code}")
                print(response.text)
                return False
                
        except Exception as e:
            print(f"‚ùå Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ïò§Î•ò: {e}")
            return False
    
    def test_video_analysis(self, video_path=None):
        """ÎπÑÎîîÏò§ Î∂ÑÏÑù ÌÖåÏä§Ìä∏"""
        print("üé¨ ÎπÑÎîîÏò§ Î∂ÑÏÑù ÌÖåÏä§Ìä∏...")
        
        if not video_path:
            print("‚ö†Ô∏è ÎπÑÎîîÏò§ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§. ÌÖåÏä§Ìä∏ Í±¥ÎÑàÎúÄ")
            return True
        
        if not os.path.exists(video_path):
            print(f"‚ùå ÎπÑÎîîÏò§ ÌååÏùº ÏóÜÏùå: {video_path}")
            return False
        
        try:
            with open(video_path, 'rb') as f:
                files = {'file': ('test_video.mp4', f, 'video/mp4')}
                response = requests.post(f"{self.base_url}/api/v1/analyze/video", files=files)
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ ÎπÑÎîîÏò§ Î∂ÑÏÑù ÏÑ±Í≥µ")
                print(f"   Í∏∏Ïù¥: {data['result']['video_info']['duration_seconds']:.1f}Ï¥à")
                print(f"   Ìï¥ÏÉÅÎèÑ: {data['result']['video_info']['resolution']}")
                print(f"   ÌíàÏßà Ï†êÏàò: {data['result']['jewelry_analysis']['quality_score']}")
                return True
            else:
                print(f"‚ùå ÎπÑÎîîÏò§ Î∂ÑÏÑù Ïã§Ìå®: {response.status_code}")
                print(response.text)
                return False
                
        except Exception as e:
            print(f"‚ùå ÎπÑÎîîÏò§ Î∂ÑÏÑù Ïò§Î•ò: {e}")
            return False
    
    def create_test_image(self):
        """ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±"""
        try:
            import cv2
            import numpy as np
            
            # Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
            img = np.zeros((400, 600, 3), dtype=np.uint8)
            img[:, :] = [50, 100, 150]  # Î∞∞Í≤ΩÏÉâ
            
            # ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
            cv2.putText(img, "Test Jewelry Certificate", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
            cv2.putText(img, "Diamond Grade: Excellent", (50, 150), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            cv2.putText(img, "Carat Weight: 1.25ct", (50, 200), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            cv2.putText(img, "Color Grade: D", (50, 250), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
            
            test_image_path = "test_certificate.png"
            cv2.imwrite(test_image_path, img)
            print(f"‚úÖ ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±: {test_image_path}")
            return test_image_path
            
        except Exception as e:
            print(f"‚ùå ÌÖåÏä§Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return None
    
    def run_all_tests(self):
        """Î™®Îì† ÌÖåÏä§Ìä∏ Ïã§Ìñâ"""
        print("üß™ API Ï†ÑÏ≤¥ ÌÖåÏä§Ìä∏ ÏãúÏûë")
        print("=" * 40)
        
        tests = [
            ("Ìó¨Ïä§ Ï≤¥ÌÅ¨", self.test_health),
            ("Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù", lambda: self.test_image_analysis()),
            ("ÎπÑÎîîÏò§ Î∂ÑÏÑù", lambda: self.test_video_analysis())
        ]
        
        results = []
        
        for test_name, test_func in tests:
            print(f"\\nüîÑ {test_name} ÌÖåÏä§Ìä∏ Ïã§Ìñâ...")
            try:
                result = test_func()
                results.append((test_name, result))
                if result:
                    print(f"‚úÖ {test_name} ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ")
                else:
                    print(f"‚ùå {test_name} ÌÖåÏä§Ìä∏ Ïã§Ìå®")
            except Exception as e:
                print(f"‚ùå {test_name} ÌÖåÏä§Ìä∏ Ïò§Î•ò: {e}")
                results.append((test_name, False))
        
        # Í≤∞Í≥º ÏöîÏïΩ
        print("\\n" + "=" * 40)
        print("üìä ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏöîÏïΩ")
        print("=" * 40)
        
        success_count = sum(1 for _, result in results if result)
        total_tests = len(results)
        
        for test_name, result in results:
            status = "‚úÖ ÏÑ±Í≥µ" if result else "‚ùå Ïã§Ìå®"
            print(f"   {test_name}: {status}")
        
        print(f"\\nüéØ Ï†ÑÏ≤¥ Í≤∞Í≥º: {success_count}/{total_tests} ÏÑ±Í≥µ ({success_count/total_tests*100:.1f}%)")
        
        if success_count == total_tests:
            print("üéâ Î™®Îì† ÌÖåÏä§Ìä∏ ÌÜµÍ≥º! API ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ ÏûëÎèôÌï©ÎãàÎã§.")
        elif success_count > 0:
            print("‚ö†Ô∏è ÏùºÎ∂Ä ÌÖåÏä§Ìä∏ Ïã§Ìå®. ÏÑúÎ≤ÑÎäî Î∂ÄÎ∂ÑÏ†ÅÏúºÎ°ú ÏûëÎèôÌï©ÎãàÎã§.")
        else:
            print("‚ùå Î™®Îì† ÌÖåÏä§Ìä∏ Ïã§Ìå®. ÏÑúÎ≤Ñ ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
        
        return success_count, total_tests

def main():
    client = APITestClient()
    client.run_all_tests()

if __name__ == "__main__":
    main()
'''
        
        test_client_path = self.current_dir / "test_api_client.py"
        with open(test_client_path, 'w', encoding='utf-8') as f:
            f.write(test_client_content)
        
        print("‚úÖ API ÌÖåÏä§Ìä∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å")
    
    def install_api_dependencies(self):
        """API ÏÑúÎ≤Ñ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò"""
        print("üì¶ API ÏÑúÎ≤Ñ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò Ï§ë...")
        
        api_packages = [
            "fastapi",
            "uvicorn[standard]",
            "python-multipart",
            "requests"
        ]
        
        for package in api_packages:
            try:
                print(f"  üì¶ ÏÑ§Ïπò: {package}")
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", package, "--user"
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(f"  ‚úÖ ÏÑ±Í≥µ: {package}")
                else:
                    print(f"  ‚ö†Ô∏è Ïã§Ìå®: {package}")
                    
            except Exception as e:
                print(f"  ‚ùå Ïò§Î•ò: {package} - {e}")
        
        print("‚úÖ API ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò ÏôÑÎ£å")
    
    def start_api_server(self):
        """API ÏÑúÎ≤Ñ ÏãúÏûë"""
        print("\nüöÄ API ÏÑúÎ≤Ñ ÏãúÏûë Ï§ë...")
        
        try:
            # ÏÑúÎ≤Ñ ÌîÑÎ°úÏÑ∏Ïä§ ÏãúÏûë
            self.server_process = subprocess.Popen([
                sys.executable, "api_server.py"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            print("‚è±Ô∏è ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë... (10Ï¥à)")
            time.sleep(10)
            
            # ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏
            if self.server_process.poll() is None:
                print("‚úÖ API ÏÑúÎ≤ÑÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!")
                print(f"üì° ÏÑúÎ≤Ñ Ï£ºÏÜå: http://localhost:{self.api_port}")
                print(f"üìã API Î¨∏ÏÑú: http://localhost:{self.api_port}/docs")
                print(f"üîç Ìó¨Ïä§Ï≤¥ÌÅ¨: http://localhost:{self.api_port}/health")
                return True
            else:
                print("‚ùå API ÏÑúÎ≤Ñ ÏãúÏûë Ïã§Ìå®")
                if self.server_process.stderr:
                    error_output = self.server_process.stderr.read()
                    print(f"Ïò§Î•ò: {error_output}")
                return False
                
        except Exception as e:
            print(f"‚ùå API ÏÑúÎ≤Ñ ÏãúÏûë Ïò§Î•ò: {e}")
            return False
    
    def test_api_endpoints(self):
        """API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏"""
        print("\nüß™ API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏ ÏãúÏûë...")
        
        try:
            # ÌÖåÏä§Ìä∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïã§Ìñâ
            result = subprocess.run([
                sys.executable, "test_api_client.py"
            ], capture_output=False, text=True)
            
            return result.returncode == 0
            
        except Exception as e:
            print(f"‚ùå API ÌÖåÏä§Ìä∏ Ïò§Î•ò: {e}")
            return False
    
    def stop_api_server(self):
        """API ÏÑúÎ≤Ñ Ï§ëÏßÄ"""
        if self.server_process and self.server_process.poll() is None:
            print("\n‚èπÔ∏è API ÏÑúÎ≤Ñ Ï§ëÏßÄ Ï§ë...")
            self.server_process.terminate()
            self.server_process.wait()
            print("‚úÖ API ÏÑúÎ≤ÑÍ∞Ä Ï§ëÏßÄÎêòÏóàÏäµÎãàÎã§.")
    
    def run_api_workflow(self):
        """Ï†ÑÏ≤¥ API ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ"""
        print("üéØ Ï£ºÏñºÎ¶¨ AI ÌîåÎû´Ìèº API ÏÑúÎ≤Ñ Íµ¨Îèô Î∞è ÌÖåÏä§Ìä∏")
        print("=" * 60)
        
        steps = [
            ("API ÌååÏùº Îã§Ïö¥Î°úÎìú", self.download_api_files),
            ("API ÏÑúÎ≤Ñ ÏÉùÏÑ±", lambda: (self.create_simple_api_server(), True)[1]),
            ("API ÌÖåÏä§Ìä∏ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±", lambda: (self.create_api_test_client(), True)[1]),
            ("API ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò", lambda: (self.install_api_dependencies(), True)[1]),
            ("API ÏÑúÎ≤Ñ ÏãúÏûë", self.start_api_server),
            ("API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏", self.test_api_endpoints)
        ]
        
        success_count = 0
        
        try:
            for step_name, step_func in steps:
                print(f"\nüîÑ {step_name} Ïã§Ìñâ Ï§ë...")
                
                if step_func():
                    print(f"‚úÖ {step_name} ÏôÑÎ£å")
                    success_count += 1
                else:
                    print(f"‚ö†Ô∏è {step_name} Î∂ÄÎ∂ÑÏ†Å ÏÑ±Í≥µ")
                    success_count += 0.5
            
            # ÏµúÏ¢Ö Í≤∞Í≥º
            print("\n" + "=" * 60)
            print("üèÜ API ÏÑúÎ≤Ñ ÌÖåÏä§Ìä∏ Í≤∞Í≥º")
            print("=" * 60)
            
            success_rate = (success_count / len(steps)) * 100
            
            if success_rate >= 90:
                status = "üéâ ÏôÑÎ≤ΩÌïú ÏÑ±Í≥µ! API ÏÑúÎ≤ÑÍ∞Ä ÏôÑÏ†ÑÌûà Íµ¨ÎèôÎê©ÎãàÎã§."
                grade = "A+"
            elif success_rate >= 80:
                status = "‚úÖ ÏÑ±Í≥µ! API ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ ÏûëÎèôÌï©ÎãàÎã§."
                grade = "A"
            elif success_rate >= 70:
                status = "üëç ÎåÄÎ∂ÄÎ∂Ñ ÏÑ±Í≥µ! ÏùºÎ∂Ä Í∏∞Îä•Ïóê Ï†úÌïúÏù¥ ÏûàÏùÑ Ïàò ÏûàÏäµÎãàÎã§."
                grade = "B"
            else:
                status = "‚ö†Ô∏è Î∂ÄÎ∂ÑÏ†Å ÏÑ±Í≥µ. ÏùºÎ∂Ä Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§."
                grade = "C"
            
            print(f"üìä ÏÑ±Í≥µÎ•†: {success_rate:.1f}% ({success_count}/{len(steps)} Îã®Í≥Ñ)")
            print(f"üéØ Îì±Í∏â: {grade}")
            print(f"üöÄ ÏÉÅÌÉú: {status}")
            
            if success_rate >= 70:
                print(f"\nüí° API ÏÇ¨Ïö© Î∞©Î≤ï:")
                print(f"   üåê Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú http://localhost:{self.api_port}/docs Ï†ëÏÜç")
                print(f"   üì± REST API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Î°ú Ïó∞Îèô ÌÖåÏä§Ìä∏")
                print(f"   üîó Îã§Î•∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÍ≥º Ïó∞Îèô Í∞ÄÎä•")
                
                input("\n‚è∏Ô∏è API ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§. ÌÖåÏä§Ìä∏ ÏôÑÎ£å ÌõÑ EnterÎ•º ÎàÑÎ•¥Î©¥ ÏÑúÎ≤ÑÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§...")
            
            return success_rate >= 70
            
        finally:
            # ÏÑúÎ≤Ñ Ï†ïÎ¶¨
            self.stop_api_server()

def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    runner = WindowsAPIServerRunner()
    
    try:
        success = runner.run_api_workflow()
        
        if success:
            print("\nüéØ API ÏÑúÎ≤Ñ ÌÖåÏä§Ìä∏Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
            print("\nüìù Ï∂îÍ∞Ä ÌÖåÏä§Ìä∏ Î™ÖÎ†πÏñ¥:")
            print("   python api_server.py              # API ÏÑúÎ≤Ñ Îã®ÎèÖ Ïã§Ìñâ")
            print("   python test_api_client.py         # API ÌÖåÏä§Ìä∏Îßå Ïã§Ìñâ")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ÌÖåÏä§Ìä∏Í∞Ä Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.")
        runner.stop_api_server()
    except Exception as e:
        print(f"\n‚ùå ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò: {e}")
        runner.stop_api_server()

if __name__ == "__main__":
    main()
