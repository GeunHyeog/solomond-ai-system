#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
🚀 SOLOMOND AI - n8n 워크플로우 자동 설정 스크립트
n8n API를 사용하여 듀얼 브레인 워크플로우를 자동으로 생성하고 활성화
"""

import requests
import json
import time
from pathlib import Path

class N8nWorkflowSetup:
    def __init__(self):
        self.base_url = "http://localhost:5678/rest"
        self.session = requests.Session()
        
    def check_n8n_health(self):
        """n8n 서버 상태 확인"""
        try:
            response = self.session.get("http://localhost:5678/healthz", timeout=5)
            if response.status_code == 200:
                print("n8n 서버 정상 작동 중")
                return True
        except Exception as e:
            print(f"n8n 서버 연결 실패: {e}")
            return False
    
    def get_credentials(self):
        """기존 Google Calendar 자격증명 ID 조회"""
        try:
            response = self.session.get(f"{self.base_url}/credentials")
            if response.status_code == 200:
                credentials = response.json()
                for cred in credentials:
                    if cred.get('type') == 'googleCalendarOAuth2Api':
                        print(f"Google Calendar 자격증명 발견: {cred['id']}")
                        return cred['id']
            print("Google Calendar 자격증명을 찾을 수 없습니다")
            return None
        except Exception as e:
            print(f"자격증명 조회 실패: {e}")
            return None
    
    def create_dual_brain_workflow(self, credential_id):
        """듀얼 브레인 워크플로우 생성"""
        workflow_data = {
            "name": "SOLOMOND Dual Brain Pipeline",
            "active": True,
            "nodes": [
                {
                    "id": "webhook_trigger",
                    "name": "분석 완료 트리거",
                    "type": "n8n-nodes-base.webhook",
                    "position": [250, 300],
                    "parameters": {
                        "httpMethod": "POST",
                        "path": "analysis-complete",
                        "responseMode": "responseNode",
                        "options": {}
                    }
                },
                {
                    "id": "status_check",
                    "name": "상태 확인",
                    "type": "n8n-nodes-base.function",
                    "position": [450, 300],
                    "parameters": {
                        "functionCode": """
// SOLOMOND AI 분석 결과 처리
const analysisData = $input.all()[0].json;

// 분석 성공 여부 확인
const isSuccess = analysisData.success_count > 0;
const totalFiles = analysisData.total_files || 0;
const successCount = analysisData.success_count || 0;

// 처리된 데이터 반환
return [{
  json: {
    ...analysisData,
    processed: true,
    timestamp: new Date().toISOString(),
    success_rate: totalFiles > 0 ? (successCount / totalFiles) * 100 : 0,
    calendar_ready: isSuccess
  }
}];
"""
                    }
                },
                {
                    "id": "calendar_event",
                    "name": "캘린더 이벤트 생성",
                    "type": "n8n-nodes-base.googleCalendar",
                    "position": [650, 300],
                    "parameters": {
                        "operation": "create",
                        "calendarId": "primary",
                        "title": "=🎯 SOLOMOND AI 분석: {{$json.pre_info.conference_name || 'Unknown'}}",
                        "description": "=📊 솔로몬드 AI 분석 결과\\n\\n🎯 컨퍼런스: {{$json.pre_info.conference_name || 'Unknown'}}\\n📅 분석일시: {{$json.timestamp}}\\n📁 분석파일: {{$json.total_files}}개\\n✅ 성공률: {{$json.success_count}}/{{$json.total_files}} ({{Math.round($json.success_rate)}}%)\\n\\n🤖 Generated by SOLOMOND AI Dual Brain System",
                        "start": "={{new Date().toISOString()}}",
                        "end": "={{new Date(Date.now() + 3600000).toISOString()}}",
                        "options": {
                            "colorId": "9"
                        }
                    },
                    "credentials": {
                        "googleCalendarOAuth2Api": {
                            "id": credential_id
                        }
                    }
                },
                {
                    "id": "response_node",
                    "name": "응답",
                    "type": "n8n-nodes-base.respondToWebhook",
                    "position": [850, 300],
                    "parameters": {
                        "respondWith": "json",
                        "responseBody": "={\"status\": \"success\", \"message\": \"SOLOMOND AI 듀얼 브레인 처리 완료\", \"analysis_id\": \"{{$('상태 확인').item.json.analysis_id}}\", \"calendar_event\": \"{{$('캘린더 이벤트 생성').item.json.id}}\", \"timestamp\": \"{{new Date().toISOString()}}\"}"
                    }
                }
            ],
            "connections": {
                "분석 완료 트리거": {
                    "main": [
                        [
                            {
                                "node": "상태 확인",
                                "type": "main",
                                "index": 0
                            }
                        ]
                    ]
                },
                "상태 확인": {
                    "main": [
                        [
                            {
                                "node": "캘린더 이벤트 생성",
                                "type": "main", 
                                "index": 0
                            }
                        ]
                    ]
                },
                "캘린더 이벤트 생성": {
                    "main": [
                        [
                            {
                                "node": "응답",
                                "type": "main",
                                "index": 0
                            }
                        ]
                    ]
                }
            },
            "settings": {
                "executionOrder": "v1"
            }
        }
        
        try:
            response = self.session.post(f"{self.base_url}/workflows", json=workflow_data)
            if response.status_code in [200, 201]:
                workflow = response.json()
                print(f"듀얼 브레인 워크플로우 생성 완료: {workflow['id']}")
                return workflow['id']
            else:
                print(f"워크플로우 생성 실패: {response.status_code} - {response.text}")
                return None
        except Exception as e:
            print(f"워크플로우 생성 오류: {e}")
            return None
    
    def activate_workflow(self, workflow_id):
        """워크플로우 활성화"""
        try:
            response = self.session.patch(f"{self.base_url}/workflows/{workflow_id}/activate")
            if response.status_code == 200:
                print(f"워크플로우 활성화 완료: {workflow_id}")
                return True
            else:
                print(f"워크플로우 활성화 실패: {response.status_code}")
                return False
        except Exception as e:
            print(f"워크플로우 활성화 오류: {e}")
            return False
    
    def get_webhook_url(self, workflow_id):
        """워크플로우 웹훅 URL 조회"""
        try:
            response = self.session.get(f"{self.base_url}/workflows/{workflow_id}")
            if response.status_code == 200:
                workflow = response.json()
                # webhook 노드에서 path 추출
                for node in workflow.get('nodes', []):
                    if node.get('type') == 'n8n-nodes-base.webhook':
                        path = node.get('parameters', {}).get('path', 'analysis-complete')
                        webhook_url = f"http://localhost:5678/webhook/{path}"
                        print(f"웹훅 URL: {webhook_url}")
                        return webhook_url
            return None
        except Exception as e:
            print(f"웹훅 URL 조회 오류: {e}")
            return None
    
    def run_setup(self):
        """전체 설정 프로세스 실행"""
        print("SOLOMOND AI n8n 워크플로우 자동 설정 시작")
        print("=" * 50)
        
        # 1. n8n 서버 상태 확인
        if not self.check_n8n_health():
            print("n8n 서버를 먼저 시작해주세요")
            return False
        
        # 2. Google Calendar 자격증명 확인
        credential_id = self.get_credentials()
        if not credential_id:
            print("Google Calendar 자격증명을 먼저 설정해주세요")
            return False
        
        # 3. 듀얼 브레인 워크플로우 생성
        workflow_id = self.create_dual_brain_workflow(credential_id)
        if not workflow_id:
            print("워크플로우 생성 실패")
            return False
        
        # 4. 워크플로우 활성화
        if not self.activate_workflow(workflow_id):
            print("워크플로우 활성화 실패")
            return False
        
        # 5. 웹훅 URL 확인
        webhook_url = self.get_webhook_url(workflow_id)
        
        # 6. 설정 완료 정보 저장
        setup_info = {
            "workflow_id": workflow_id,
            "webhook_url": webhook_url,
            "credential_id": credential_id,
            "setup_time": time.time(),
            "status": "active"
        }
        
        with open("n8n_setup_info.json", "w", encoding="utf-8") as f:
            json.dump(setup_info, f, indent=2, ensure_ascii=False)
        
        print("\nSOLOMOND AI n8n 워크플로우 설정 완료!")
        print("=" * 50)
        print(f"워크플로우 ID: {workflow_id}")
        print(f"웹훅 URL: {webhook_url}")
        print(f"자격증명 ID: {credential_id}")
        print("\n이제 SOLOMOND 컨퍼런스 분석과 연동 테스트를 진행할 수 있습니다!")
        
        return True

if __name__ == "__main__":
    setup = N8nWorkflowSetup()
    setup.run_setup()